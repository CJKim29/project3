<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.githrd.project3.dao.ReviewMapper">

  <!-- 전체조회 -->
  <select id="selectReviewList" resultType="review">
		SELECT r.review_idx, r.review_title, r.review_content,
           r.mem_nickname, r.review_regdate, r.review_readhit,
           rs.review_score_point, m.mem_filename, m.mem_idx
    FROM review r
    JOIN member m ON r.mem_idx = m.mem_idx
    LEFT JOIN review_score rs ON r.review_idx = rs.review_idx
    WHERE r.performance_idx = #{performance_idx}
    ORDER BY r.review_idx desc;
  </select>

  <!-- 리뷰 작성(insert) -->
  <!-- 등록된 글이 있는지 체크 -->
  <select id="countReviewsByMemIdxAndPerformanceIdx" resultType="int">
        SELECT COUNT(*)
        FROM review
        WHERE mem_idx = #{mem_idx}
        AND performance_idx = #{performance_idx}
    </select>
  <!-- review_idx 받아오기 위해 useGenerateKeys와 keyProperty사용 -->
  <insert id="review_insert" parameterType="review"  useGeneratedKeys="true" keyProperty="review_idx">
     insert into review values(null,
                               #{ mem_idx },
                               #{ performance_idx },
                               #{ review_title },
                               #{ review_content },
                               #{ mem_nickname },
                               now(),
                               default
                               );
    
  </insert>
  <!-- 평점 insert -->
  <insert id="insertReviewScore" parameterType="review_score">
      insert into review_score values(null,
                                      #{ mem_idx },
                                      #{ performance_idx },
                                      #{ review_idx },
                                      #{ review_score_point }
                                      );
  </insert>
  <update id="updateReviewScore" parameterType="review_score">
        UPDATE review_score
        SET review_score_point = #{ review_score_point }
        WHERE mem_idx = #{ mem_idx }
        AND performance_idx = #{ performance_idx }
        AND review_idx = #{ review_idx };
    </update>
 


  <!-- 유저가 이미 조회수를 증가시킨 경우를 체크 -->
    <select id="checkUserReadhit" parameterType="map" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM user_review_readhit
        WHERE mem_idx = #{ mem_idx }
        AND review_idx = #{ review_idx }
    </select>

    <!-- 조회수 증가 -->
    <update id="incrementReadhit" parameterType="int">
        UPDATE review
        SET review_readhit = review_readhit + 1
        WHERE review_idx = #{ review_idx }
    </update>

    <!-- 유저의 조회수 증가 기록 추가 -->
    <insert id="insertUserReadhit" parameterType="map">
        INSERT INTO user_review_readhit (mem_idx, review_idx)
        VALUES (#{ mem_idx }, #{ review_idx })
    </insert>

    <!-- 페이징 -->
    <!-- 전체 게시물 수 -->
	<select id="review_row_total" parameterType="Map" resultType="int">
        SELECT IFNULL(COUNT(*), 0) FROM review
    </select>



    <!-- paging 별 조회 -->
	<select id="review_page_list" parameterType="Map" resultType="review">
        SELECT * 
        FROM (
            SELECT
                RANK() OVER (ORDER BY r.review_idx DESC) AS no, -- 순위 매기기: review_idx를 기준으로 내림차순 정렬
                r.*
            FROM
                review r -- review 테이블
        ) ranked_reviews
        WHERE no BETWEEN #{start} AND #{end} -- 페이징 처리
    </select>

    <!-- 수정 폼 review_idx에 해당되는 게시물 정보 -->
    <select id="review_one_from_idx" parameterType="int" resultType="review">
		SELECT *
		FROM review
		WHERE review_idx = #{ review_idx }
	</select>

    <update id="review_update" parameterType="review">
		update review set review_title      = #{ review_title },
					      review_content   = #{ review_content },					     
					      review_regdate   = now()
					      where review_idx = #{ review_idx }					     
	</update>
    
    <delete id="delete_user_review_readhit" parameterType="int">
        delete from user_review_readhit where review_idx = #{ review_idx }
    </delete>
    <delete id="delete_review_score" parameterType="int">
        delete from review_score where review_idx = #{ review_idx }
    </delete>
    <delete id="review_delete" parameterType="int">
        delete from review where review_idx = #{ review_idx }
    </delete>

</mapper>