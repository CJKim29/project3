<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.githrd.project3.dao.PerformanceMapper">

  <resultMap id="performanceMap" type="performance">
    <result property="hall_idx" column="hall_idx"/>
    <result property="performance_cate_idx" column="performance_cate_idx"/>
    <result property="performance_idx" column="performance_idx"/>
    <result property="seat_idx" column="seat_idx"/>
    <result property="performance_detail_cate_idx" column="performance_detail_cate_idx"/>

    <association property="performanceCateVo" column="performance_cate_idx=performance_cate_idx" select="performance_cate_list" />
    <association property="hallVo" column="hall_idx=hall_idx" select="hall_list" />
    <association property="performanceDetailCateVo" column="performance_detail_cate_idx=performance_detail_cate_idx" select="detail_cate_list_sub" />

    <collection property="seatList" column="performance_idx=performance_idx" select="seat_list" />
  </resultMap>


  <!-- id명 =  association의 select명            vo alias-->
  <select id="detail_cate_list_sub" resultType="performance_detail_cate">
		select * from performance_detail_cate 
				 where performance_detail_cate_idx=#{ performance_detail_cate_idx }
  </select>

  <select id="performance_cate_list" resultType="performance_cate">
	   select * from performance_cate where performance_cate_idx=#{ performance_cate_idx }
  </select>

  <select id="hall_list" resultType="hall">
	   select * from hall where hall_idx=#{ hall_idx }
  </select>

  <select id="seat_list" resultType="seat">
       select * from seat where performance_idx=#{ performance_idx } order by seat_price
  </select>

  <!-- 공연 좌석 수정을 위한 selectOneFromSeatIdx -->
  <select id="selectOneFromSeatIdx" resultType="seat">
    select * from seat where seat_idx=#{seat_idx}
  </select>

  <!-- 전체조회 (최신순 정렬)-->
  <select id="selectList" resultMap="performanceMap">
		select * from performance order by performance_startday desc
  </select>

  <!-- idx조회 -->
  <select id="selectOneFromIdx" resultMap="performanceMap">
		select * from performance where performance_idx=#{ performance_idx }
  </select>



  <!-- 장르별 공연 리스트 조회(특정 한 장르의 공연 리스트) - performance_detail_cate_name 이용-->
  <select id="performance_detail_cate_list" parameterType="int" resultMap="performanceMap">
		select * from performance 
				 where performance_detail_cate_idx = #{ performance_detail_cate_idx }
				 	   and hall_idx = #{hall_idx}
  </select>

  <!-- 장르별+지역별 조회 / 최신순 정렬 -->
  <!-- performance_detail_cate_idx=0 일 경우에 대한 처리를 어떻게 할지 -->
  <select id="selectCategoryList" parameterType="Map" resultMap="performanceMap">
		select * from performance 
    <trim prefix="where" prefixOverrides="and">

      <if test="performance_detail_cate_idx!=0">
                 performance_detail_cate_idx = #{ performance_detail_cate_idx }
      </if>
      <if test="hall_area!='all'">
                 and (hall_idx in (select hall_idx from hall where  hall_area = #{hall_area}) )
      </if>
    </trim>

    <!-- 정렬 -->
    <choose>
      <when test='sort_options == "s_abc"'>
            order by performance_name asc 
      </when>
      <when test='sort_options == "s_new"'>
             order by performance_startday desc
      </when>
      <otherwise>
            order by performance_idx asc
      </otherwise>
    </choose>

    <!-- 몇개씩 볼건지 -->
    <choose>
      <when test= 'sort_options_number == "9"'>
            limit 9
      </when>
      <when test= 'sort_options_number == "15"'>
            limit 15
      </when>
      <otherwise>
            limit 21
      </otherwise>
    </choose>

  </select>

  <!-- 공연 정보 등록 -->
  <insert id="insert" parameterType="performance">
    insert into performance values(null,
							                     #{performance_cate_idx},
                                   #{performance_detail_cate_idx},
                                   #{hall_idx},
                                   #{performance_name},
                                   #{performance_startday},
                                   #{performance_endday},
							                     #{performance_runtime},
                                   #{performance_image},
                                   #{performance_age}							
                               );
  </insert>

  <!-- 공연 좌석 등록 -->
  <insert id="insertSeat" parameterType="seat">
    insert into seat values(null,
                            #{performance_idx},
                            #{seat_grade},
                            #{seat_price}
    );
  </insert>

  <!-- 공연 수정 -->
  <update id="update" parameterType="performance">
    update performance set performance_cate_idx = #{performance_cate_idx},
                           performance_detail_cate_idx = #{performance_detail_cate_idx},
                           hall_idx = #{hall_idx},
                           performance_name = #{performance_name},
                           performance_startday = #{performance_startday},
                           performance_endday = #{performance_endday},
                           performance_runtime = #{performance_runtime},
                           performance_age = #{performance_age}
                        where performance_idx=#{performance_idx}
  </update>

  <!-- 공연 수정 - 이미지 -->
  <update id="updateImage" parameterType="performance">
    update performance set performance_image = #{performance_image} where performance_idx=#{performance_idx}
  </update>

  <!-- 공연 좌석 수정 -->
  <update id="updateSeat" parameterType="seat">
  update seat set seat_grade=#{seat_grade}, seat_price=#{seat_price}
              where seat_idx=#{seat_idx} and performance_idx=#{performance_idx}
  </update>

  <!-- 공연 삭제 -->
  <delete id="delete" parameterType="int">
  delete from performance where performance_idx=#{performance_idx}
  </delete>



  <!-- 페이징 처리 -->
  <select id="performancePageList" parameterType="Map" resultType="performance">
    SELECT performance.* 
    FROM (
            SELECT
                RANK() OVER (ORDER BY p.performance_idx DESC) AS no,
                p.performance_idx,
                p.performance_cate_idx,
                p.performance_detail_cate_idx,
                p.hall_idx,
                p.performance_name,
                p.performance_startday,
                p.performance_endday,
                p.performance_runtime,
                p.performance_image,
                p.performance_age,
                p.performance_state,
                p.performance_detail_info,
                p.performance_al,
                p.performance_detail_image
            FROM
                (
                    SELECT *
                    FROM performance p
                    JOIN seat s 
                    ON p.performance_idx = s.performance_idx 
                )pfm
        )performance
        WHERE no BETWEEN #{start} AND #{end}
  </select>

  <select id="selectRowTotal" parameterType="Map" resultType="int">
        select ifnull(count(*),0) from performance
  </select>









  <!-- 검색어에 따른 공연 목록 조회!! -->
  <select id="searchPerformances" parameterType="string" resultMap="performanceMap">
        select * from performance
        where performance_name like #{search}
  </select>

  <!--parameterType = 전달인자타입
		    resultType = select결과에 대한 포장타입(각레코드에 대한) -->

</mapper>